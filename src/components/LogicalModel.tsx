
import React, { useState } from 'react';
import { Database, Download, Plus, Link, Search, Filter, ThumbsUp, ThumbsDown, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';

const LogicalModel = () => {
  const [selectedDatamart, setSelectedDatamart] = useState('');
  const [selectedLayer, setSelectedLayer] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [entityFilter, setEntityFilter] = useState('');
  const [isBuilding, setIsBuilding] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const [entities, setEntities] = useState([
    { id: 1, name: 'Customer', description: '–ö–ª–∏–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã', type: '–û—Å–Ω–æ–≤–Ω–∞—è', source: 'dm.sales' },
    { id: 2, name: 'Product', description: '–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏', type: '–û—Å–Ω–æ–≤–Ω–∞—è', source: 'dm.sales' },
    { id: 3, name: 'Order', description: '–ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤', type: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è', source: 'dm.sales' },
  ]);

  const [attributes, setAttributes] = useState([
    { id: 1, entity: 'Customer', attribute: 'customer_id', dataType: 'INTEGER', mandatory: true, keyType: 'PK', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' },
    { id: 2, entity: 'Customer', attribute: 'customer_name', dataType: 'VARCHAR(100)', mandatory: true, keyType: '', description: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞' },
    { id: 3, entity: 'Product', attribute: 'product_id', dataType: 'INTEGER', mandatory: true, keyType: 'PK', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' },
    { id: 4, entity: 'Product', attribute: 'product_name', dataType: 'VARCHAR(200)', mandatory: true, keyType: '', description: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' },
    { id: 5, entity: 'Order', attribute: 'order_id', dataType: 'INTEGER', mandatory: true, keyType: 'PK', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞' },
    { id: 6, entity: 'Order', attribute: 'customer_id', dataType: 'INTEGER', mandatory: true, keyType: 'FK', description: '–°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º' },
  ]);

  const [relationships, setRelationships] = useState([
    { id: 1, fromEntity: 'Customer', toEntity: 'Order', relationshipType: 'One-to-Many', sourceAttribute: 'customer_id', targetAttribute: 'customer_id' },
    { id: 2, fromEntity: 'Product', toEntity: 'Order', relationshipType: 'Many-to-Many', sourceAttribute: 'product_id', targetAttribute: 'product_id' },
  ]);

  const datamarts = [
    'dm.sales',
    'dm.marketing',
    'dm.finance',
    'dm.operations'
  ];

  const layers = [
    '–°–ª–æ–π –ö–•–î_1',
    '–°–ª–æ–π –ö–•–î_2',
    '–°–ª–æ–π –ö–•–î_3'
  ];

  const handleBuildModel = async () => {
    if (!selectedDatamart) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive"
      });
      return;
    }

    setIsBuilding(true);
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    setTimeout(() => {
      setIsBuilding(false);
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–õ–æ–≥–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞",
      });
    }, 3000);
  };

  const handleExport = (type: string) => {
    toast({
      title: "–≠–∫—Å–ø–æ—Ä—Ç",
      description: `–≠–∫—Å–ø–æ—Ä—Ç ${type} –Ω–∞—á–∞—Ç`,
    });
  };

  const handleFeedback = (type: 'positive' | 'negative') => {
    if (type === 'positive') {
      toast({
        title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!",
        description: "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å —Å–∏—Å—Ç–µ–º—É",
      });
    } else {
      setIsDialogOpen(true);
    }
  };

  const submitFeedback = () => {
    toast({
      title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
      description: "–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã",
    });
    setFeedback('');
    setIsDialogOpen(false);
  };

  const filteredEntities = entities.filter(entity =>
    entity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    entity.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredAttributes = attributes.filter(attr =>
    (entityFilter === '' || attr.entity === entityFilter) &&
    (attr.attribute.toLowerCase().includes(searchTerm.toLowerCase()) ||
     attr.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  return (
    <div className="p-6 space-y-6">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="dwh-card">
        <h2 className="text-lg font-semibold text-dwh-navy mb-6">–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="space-y-2">
            <label className="text-sm font-medium text-dwh-navy">–í–∏—Ç—Ä–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö *</label>
            <Select value={selectedDatamart} onValueChange={setSelectedDatamart}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É..." />
              </SelectTrigger>
              <SelectContent>
                {datamarts.map((datamart) => (
                  <SelectItem key={datamart} value={datamart}>
                    {datamart}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium text-dwh-navy">–°–ª–æ–π –ö–•–î</label>
            <Select value={selectedLayer} onValueChange={setSelectedLayer}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π..." />
              </SelectTrigger>
              <SelectContent>
                {layers.map((layer) => (
                  <SelectItem key={layer} value={layer}>
                    {layer}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-end">
            <Button 
              onClick={handleBuildModel}
              disabled={isBuilding}
              className="dwh-button-primary w-full"
            >
              {isBuilding ? (
                <>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ...</>
              ) : (
                <>
                  <Database className="w-4 h-4 mr-2" />
                  –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –õ–ú–î
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ */}
      <div className="dwh-card">
        <Tabs defaultValue="entities" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="entities">–°—É—â–Ω–æ—Å—Ç–∏</TabsTrigger>
            <TabsTrigger value="attributes">–ê—Ç—Ä–∏–±—É—Ç—ã</TabsTrigger>
            <TabsTrigger value="relationships">–°–≤—è–∑–∏</TabsTrigger>
          </TabsList>

          {/* –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π */}
          <TabsContent value="entities" className="space-y-4">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-2">
                <Search className="w-4 h-4 text-gray-400" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-64"
                />
              </div>
              <Button onClick={() => handleExport('—Å—É—â–Ω–æ—Å—Ç–µ–π')} variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                üì• Excel
              </Button>
            </div>

            <div className="border rounded-lg">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ</TableHead>
                    <TableHead>–û–ø–∏—Å–∞–Ω–∏–µ</TableHead>
                    <TableHead>–¢–∏–ø</TableHead>
                    <TableHead>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredEntities.map((entity) => (
                    <TableRow key={entity.id}>
                      <TableCell>{entity.id}</TableCell>
                      <TableCell className="font-medium">{entity.name}</TableCell>
                      <TableCell>{entity.description}</TableCell>
                      <TableCell>
                        <span className="px-2 py-1 bg-dwh-cyan/20 text-dwh-navy rounded-full text-xs">
                          {entity.type}
                        </span>
                      </TableCell>
                      <TableCell className="font-mono text-sm text-dwh-cyan">{entity.source}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </TabsContent>

          {/* –¢–∞–±–ª–∏—Ü–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ */}
          <TabsContent value="attributes" className="space-y-4">
            <div className="flex justify-between items-center">
              <div className="flex items-center space-x-2">
                <Search className="w-4 h-4 text-gray-400" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-48"
                />
                <Select value={entityFilter} onValueChange={setEntityFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Å—É—â–Ω–æ—Å—Ç–∏..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–í—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏</SelectItem>
                    {entities.map((entity) => (
                      <SelectItem key={entity.name} value={entity.name}>
                        {entity.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <Button onClick={() => handleExport('–∞—Ç—Ä–∏–±—É—Ç–æ–≤')} variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                üì• Excel
              </Button>
            </div>

            <div className="border rounded-lg">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>–°—É—â–Ω–æ—Å—Ç—å</TableHead>
                    <TableHead>–ê—Ç—Ä–∏–±—É—Ç</TableHead>
                    <TableHead>–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</TableHead>
                    <TableHead>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π</TableHead>
                    <TableHead>PK/FK</TableHead>
                    <TableHead>–û–ø–∏—Å–∞–Ω–∏–µ</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredAttributes.map((attr) => (
                    <TableRow key={attr.id}>
                      <TableCell>{attr.id}</TableCell>
                      <TableCell className="font-medium">{attr.entity}</TableCell>
                      <TableCell className="font-mono text-sm">{attr.attribute}</TableCell>
                      <TableCell className="font-mono text-sm text-dwh-cyan">{attr.dataType}</TableCell>
                      <TableCell>
                        {attr.mandatory ? (
                          <span className="text-red-600">–î–∞</span>
                        ) : (
                          <span className="text-gray-500">–ù–µ—Ç</span>
                        )}
                      </TableCell>
                      <TableCell>
                        {attr.keyType && (
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            attr.keyType === 'PK' ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'
                          }`}>
                            {attr.keyType}
                          </span>
                        )}
                      </TableCell>
                      <TableCell>{attr.description}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </TabsContent>

          {/* –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π */}
          <TabsContent value="relationships" className="space-y-4">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold text-dwh-navy">–°–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏</h3>
              <Button onClick={() => handleExport('—Å–≤—è–∑–µ–π')} variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                üì• Excel
              </Button>
            </div>

            <div className="border rounded-lg">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>–û—Ç (—Å—É—â–Ω–æ—Å—Ç—å)</TableHead>
                    <TableHead>–ö (—Å—É—â–Ω–æ—Å—Ç—å)</TableHead>
                    <TableHead>–¢–∏–ø —Å–≤—è–∑–∏</TableHead>
                    <TableHead>–ê—Ç—Ä–∏–±—É—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫</TableHead>
                    <TableHead>–ê—Ç—Ä–∏–±—É—Ç-—Ü–µ–ª—å</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {relationships.map((rel) => (
                    <TableRow key={rel.id}>
                      <TableCell>{rel.id}</TableCell>
                      <TableCell className="font-medium">{rel.fromEntity}</TableCell>
                      <TableCell className="font-medium">{rel.toEntity}</TableCell>
                      <TableCell>
                        <span className="px-2 py-1 bg-dwh-navy/10 text-dwh-navy rounded-full text-xs">
                          {rel.relationshipType}
                        </span>
                      </TableCell>
                      <TableCell className="font-mono text-sm">{rel.sourceAttribute}</TableCell>
                      <TableCell className="font-mono text-sm">{rel.targetAttribute}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç */}
      <div className="dwh-card">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold text-dwh-navy">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-sm text-gray-600">–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ Excel</p>
          </div>
          <Button onClick={() => handleExport('–≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö')} className="dwh-button-secondary">
            <FileText className="w-4 h-4 mr-2" />
            üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ
          </Button>
        </div>
      </div>

      {/* –ë–ª–æ–∫ –æ—Ü–µ–Ω–∫–∏ */}
      <div className="dwh-card">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-dwh-navy">–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
            <p className="text-sm text-gray-600">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞</p>
          </div>
          <div className="flex space-x-3">
            <Button
              onClick={() => handleFeedback('positive')}
              variant="outline"
              className="border-green-500 text-green-600 hover:bg-green-50"
            >
              <ThumbsUp className="w-4 h-4 mr-2" />
              üëç –ü–æ–ª–µ–∑–Ω–æ
            </Button>
            <Button
              onClick={() => handleFeedback('negative')}
              variant="outline"
              className="border-red-500 text-red-600 hover:bg-red-50"
            >
              <ThumbsDown className="w-4 h-4 mr-2" />
              üëé –ù–µ—Ç–æ—á–Ω–æ
            </Button>
          </div>
        </div>
      </div>

      {/* –î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <Textarea
              placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—Ç–æ—á–Ω—ã–º –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å..."
              value={feedback}
              onChange={(e) => setFeedback(e.target.value)}
              rows={4}
            />
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={submitFeedback} className="dwh-button-primary">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default LogicalModel;
